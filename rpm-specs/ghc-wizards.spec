# generated by cabal-rpm-2.2.1
# https://docs.fedoraproject.org/en-US/packaging-guidelines/Haskell/

%global pkg_name wizards
%global pkgver %{pkg_name}-%{version}
%{?haskell_setup}

Name:           ghc-%{pkg_name}
Version:        1.0.3
Release:        %autorelease
Summary:        High level, generic library for interrogative user interfaces

License:        BSD-3-Clause
Url:            https://hackage.haskell.org/package/%{pkg_name}
# Begin cabal-rpm sources:
Source0:        https://hackage.haskell.org/package/%{pkgver}/%{pkgver}.tar.gz
Source1:        https://hackage.haskell.org/package/%{pkgver}/%{pkg_name}.cabal#/%{pkgver}.cabal
# End cabal-rpm sources

# Begin cabal-rpm deps:
BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-base-devel
BuildRequires:  ghc-containers-devel
BuildRequires:  ghc-control-monad-free-devel
BuildRequires:  ghc-haskeline-devel
BuildRequires:  ghc-mtl-devel
BuildRequires:  ghc-transformers-devel
%if %{with ghc_prof}
BuildRequires:  ghc-base-prof
BuildRequires:  ghc-containers-prof
BuildRequires:  ghc-control-monad-free-prof
BuildRequires:  ghc-haskeline-prof
BuildRequires:  ghc-mtl-prof
BuildRequires:  ghc-transformers-prof
%endif
# End cabal-rpm deps

%description
'wizards' is a package designed for the quick and painless development of
/interrogative/ programs, which revolve around a "dialogue" with the user, who
is asked a series of questions in a sequence much like an installation wizard.

Everything from interactive system scripts, to installation wizards, to
full-blown shells can be implemented with the support of 'wizards'.

It is developed transparently on top of a free monad, which separates out the
semantics of the program from any particular interface. A variety of backends
exist, including console-based "System.Console.Wizard.Haskeline" and
"System.Console.Wizard.BasicIO", and the pure "System.Console.Wizard.Pure".
It is also possible to write your own backends, or extend existing back-ends
with new features. While both built-in IO backends operate on a console, there
is no reason why 'wizards' cannot also be used for making GUI wizard
interfaces.



See the github page for examples on usage:

<http://www.github.com/liamoc/wizards>

For creating backends, the module "System.Console.Wizard.Internal" has a brief
tutorial.


%package devel
Summary:        Haskell %{pkg_name} library development files
Provides:       %{name}-static = %{version}-%{release}
Provides:       %{name}-static%{?_isa} = %{version}-%{release}
%if %{defined ghc_version}
Requires:       ghc-compiler = %{ghc_version}
%endif
Requires:       %{name}%{?_isa} = %{version}-%{release}

%description devel
This package provides the Haskell %{pkg_name} library development files.


%if %{with haddock}
%package doc
Summary:        Haskell %{pkg_name} library documentation
BuildArch:      noarch
Requires:       ghc-filesystem

%description doc
This package provides the Haskell %{pkg_name} library documentation.
%endif


%if %{with ghc_prof}
%package prof
Summary:        Haskell %{pkg_name} profiling library
Requires:       %{name}-devel%{?_isa} = %{version}-%{release}
Supplements:    (%{name}-devel and ghc-prof)

%description prof
This package provides the Haskell %{pkg_name} profiling library.
%endif


%prep
# Begin cabal-rpm setup:
%setup -q -n %{pkgver}
cp -bp %{SOURCE1} %{pkg_name}.cabal
# End cabal-rpm setup


%build
# Begin cabal-rpm build:
%ghc_lib_build
# End cabal-rpm build


%install
# Begin cabal-rpm install
%ghc_lib_install
# End cabal-rpm install


%files -f %{name}.files
# Begin cabal-rpm files:
%license LICENSE
# End cabal-rpm files


%files devel -f %{name}-devel.files


%if %{with haddock}
%files doc -f %{name}-doc.files
%license LICENSE
%endif


%if %{with ghc_prof}
%files prof -f %{name}-prof.files
%endif


%changelog
%autochangelog
