# Generated by go2rpm
%bcond_without check

%global debug_package %{nil}

# https://github.com/jacobsa/ogletest
%global goipath         github.com/jacobsa/ogletest
%global commit          80d50a735a1108a2aeb7abc4a988d183f20c5292

%gometa

%global common_description %{expand:
Ogletest is a unit testing framework for Go with the following features:

 - An extensive and extensible set of matchers for expressing expectations.
 - Automatic failure messages; no need to say t.Errorf("Expected %v, got %v"...)
 - Clean, readable output that tells you exactly what you need to know.
 - Built-in support for mocking through the oglemock package.
 - Style and semantics similar to Google Test and Google JS Test.

It integrates with Go's built-in testing package, so it works with the go test
command, and even with other types of test within your package. Unlike the
testing package which offers only basic capabilities for signalling failures, it
offers ways to express expectations and get nice failure messages
automatically.}

%global golicenses      LICENSE
%global godocs          README.md

Name:           %{goname}
Version:        0
Release:        %autorelease
Summary:        Go unit testing framework like Google Test for C++ and JS Test

# Upstream license specification: Apache-2.0
# Automatically converted from old format: ASL 2.0 - review is highly recommended.
License:        Apache-2.0
URL:            %{gourl}
Source0:        %{gosource}
# Golden File testing tries to install an upstream copy of ogle-test- lets not do that
Patch0:         stop-local-install-test.patch

BuildRequires:  golang(github.com/jacobsa/oglematchers)
BuildRequires:  golang(github.com/jacobsa/oglemock)
BuildRequires:  golang(github.com/jacobsa/reqtrace)
BuildRequires:  golang(golang.org/x/net/context)

%description
%{common_description}

%godevelpkg

%prep
%goprep
%patch -P0 -p0
# Disable the panicking test
rm test_cases/panicking.test.go

%install
%godevelinstall

%if %{with check}
%check
%gocheck
%endif

%gopkgfiles

%changelog
%autochangelog
