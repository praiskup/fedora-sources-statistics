# Generated by go2rpm 1.11.1
%bcond_without check

%global debug_package %{nil}

%global min_llvm 14
%if %{fedora} >= 40
%global max_llvm 18
%else
%global max_llvm 17
%endif

# https://github.com/tinygo-org/go-llvm
%global goipath         tinygo.org/x/go-llvm
%global forgeurl        https://github.com/tinygo-org/go-llvm
%global commit          aaff3eb751f0d40d1bc099e1aa3b5f5ce247e6d1

%gometa -L -f

%global common_description %{expand:
This library provides bindings to a system-installed LLVM.}

%global golicenses      LICENSE.txt
%global godocs          README.markdown

Name:           golang-tinygo-x-llvm
Version:        0
Release:        %autorelease -p
Summary:        Go bindings to a system-installed LLVM

License:        Apache-2.0 AND NCSA
URL:            %{gourl}
Source:         %{gosource}

BuildRequires:  gcc-c++
BuildRequires:  make
%{lua:
local llvm_supported_versions = 'llvm_supported_versions'
for version=tonumber(rpm.expand('%min_llvm')),tonumber(rpm.expand('%max_llvm')) do
  if version ~= 16 then -- LLVM16 is no longer supported
    print('BuildRequires: llvm-devel(major) = ' .. version .. '\n')
    llvm_supported_versions = llvm_supported_versions .. ' ' .. version
  end
end
rpm.define(llvm_supported_versions)
}

%description %{common_description}

%gopkg

%prep
%goprep -A
%autopatch -p1

# Set current LLVM paths.
rm llvm_config_linux*.go
for version in %{llvm_supported_versions}; do
    # Extra checks because of https://bugzilla.redhat.com/show_bug.cgi?id=1871659
    if type llvm-config-${version}-%{__isa_bits}; then
        LLVM_CONFIG=llvm-config-${version}-%{__isa_bits}
    elif type llvm-config-${version}; then
        LLVM_CONFIG=llvm-config-${version}
    elif type llvm-config-%{__isa_bits}; then
        LLVM_CONFIG=llvm-config-%{__isa_bits}
    elif type llvm-config; then
        LLVM_CONFIG=llvm-config
    else
        echo "Unable to determine llvm-config for LLVM ${version}"
        exit 1
    fi
    LLVM_CPPFLAGS=$(${LLVM_CONFIG} --cppflags)
    if [ ${version} -gt 15 ]; then
        LLVM_CPP_STD="c++17"
    else
        LLVM_CPP_STD="c++14"
    fi
    LLVM_COMPONENTS="all-targets analysis asmparser asmprinter bitreader bitwriter codegen core coroutines debuginfodwarf executionengine instrumentation interpreter ipo irreader linker mc mcjit objcarcopts option profiledata scalaropts support target"
    LLVM_LDFLAGS=$(${LLVM_CONFIG} --ldflags --libs --system-libs ${LLVM_COMPONENTS} | tr '\n' ' ')

    cat > llvm_config_linux_llvm${version}.go << EOF
//go:build !byollvm && linux && llvm${version}
// +build !byollvm,linux,llvm${version}

package llvm

// #cgo CPPFLAGS: ${LLVM_CPPFLAGS}
// #cgo CXXFLAGS: -std=${LLVM_CPP_STD}
// #cgo LDFLAGS: ${LLVM_LDFLAGS}
import "C"

type run_build_sh int
EOF
done

%generate_buildrequires
%go_generate_buildrequires

%install
%gopkginstall

%if %{with check}
%global gotestflags %gocompilerflags -tags="${TAGS}"
%check
for version in %{llvm_supported_versions}; do
export TAGS=llvm${version}
%gocheck
done
%endif

%gopkgfiles

%changelog
%autochangelog
